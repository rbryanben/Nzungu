on:
    workflow_dispatch:
    push:
        branches:
            - production

jobs:
    # 
    # Build stage 

    # Build live-updates and commit to ECR
    build-live-updates:        
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            # Setup AWS
            - name: Configure AWS Credentials'
              uses: aws-actions/configure-aws-credentials@v4.3.1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: af-south-1

            # Build live updates 
            - name: Build Live Updates Service
              run: |
                cd live-updates
                docker build -t 944752351692.dkr.ecr.eu-west-1.amazonaws.com/live-updates-nzungu:latest .

            # Push to ECR
            - name: Push to ECR 
              run: |
                aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 944752351692.dkr.ecr.eu-west-1.amazonaws.com
                docker push 944752351692.dkr.ecr.eu-west-1.amazonaws.com/live-updates-nzungu:latest

    # Build and commit backend application to ECR
    build-backend:
        runs-on: ubuntu-latest
        steps:
            # Checkout
            - uses: actions/checkout@v4

            # Setup AWS
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4.3.1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: af-south-1

            # Build the container 
            - name: Build backend container
              run: |
                cd backend 
                docker build -t 944752351692.dkr.ecr.eu-west-1.amazonaws.com/backend-nzungu:latest .
            
            # Push the container to ECR
            - name: Push to ECR
              run: |
                aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 944752351692.dkr.ecr.eu-west-1.amazonaws.com
                docker push 944752351692.dkr.ecr.eu-west-1.amazonaws.com/backend-nzungu:latest

    # Build and push contents to S3 bucket
    build-webapp:
        # OS
        runs-on: ubuntu-latest
        steps:
            # Checkout to branch 
            - uses: actions/checkout@v4
            
            # Setup nodejs
            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                node-version: 18

            # Cache npm dependencies
            - name: Cache npm modules
              uses: actions/cache@v3
              with:
                path: ~/.npm
                key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                restore-keys: |
                  ${{ runner.os }}-node-
            
            # Setup AWS 
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4.3.1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: af-south-1
                
            # Build frontend application and zip 
            - name: Build Webapp
              run: |
                cd webapp
                npm install
                npm run build
                zip -r web-app-build.zip dist

            # Store artifact to s3 buckets
            - name: Store webapp artifact
              run: |
                aws s3 cp webapp/web-app-build.zip s3://nzungu-auxiliary/artifacts/web-app-build.zip

    # Store the compose as an artifact in s3 
    build-compose-file:
        runs-on: ubuntu-latest
        steps:
            # Checkout to branch 
            - uses: actions/checkout@v4

            # Setup AWS 
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4.3.1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: af-south-1

            # Copy the compose file to s3 buckets as an artifact
            - name: Store deployment artifact
              run: |
                aws s3 cp deployment/docker-compose.yml s3://nzungu-auxiliary/artifacts/docker-compose.yml

    #
    #  Deploy phase
    deploy-backend:
        runs-on: ubuntu-latest
        needs: [build-live-updates, build-backend, build-compose-file,build-webapp]
        steps:
            # Checkout to branch 
            - uses: actions/checkout@v4

            # Setup ssh
            - name: Setup SSH
              run: |
                mkdir ~/.ssh
                echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
                chmod 600 ~/.ssh/id_rsa
                ssh-keyscan -H 173.249.20.22 >> ~/.ssh/known_hosts

            # Deploy 
            - name: Deploy application 
              run: |
                ssh -i ~/.ssh/id_rsa rben@173.249.20.22 "cd ~/apps && ~/apps/deploy.sh"
    
    deploy-frontend:
        runs-on: ubuntu-latest
        needs: ['deploy-backend']
        steps:
            - uses: actions/checkout@v4

            # Setup AWS
            - name: Setup AWS
              uses: aws-actions/configure-aws-credentials@v4.3.1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: af-south-1
            
            # Fetch the web-app artifect
            - name: Fetch webapp artifact
              run: |
                mkdir work
                cd work
                aws s3 cp s3://nzungu-auxiliary/artifacts/web-app-build.zip .
                unzip web-app-build.zip
                aws s3 sync dist s3://bradfeild-nzungu-webapp/